"use client"
import { useEffect } from "react"

export default function SetFingerprint (){

    useEffect(()=>{

 try{
            // Generate a random challenge (this should be generated by your server)
  const challenge = new Uint8Array(32); // Replace with actual challenge
  window.crypto.getRandomValues(challenge);

  const options = {
    publicKey: {
      rp: {
        id: "453d-102-176-65-121.ngrok-free.app",
        name: "Schedule Sync"
      },
      user: {
        id: new TextEncoder().encode("1").buffer, // Replace with actual user ID
        name: "admin@organization.com",
        displayName: "Organization name"
      },
      challenge: challenge,
      pubKeyCredParams: [{ type: "public-key", alg: -7 }],
      authenticatorSelection: {
        authenticatorAttachment: "platform", // or "cross-platform" depending on your needs
        userVerification: "required", // Required for fingerprint authentication
        requireResidentKey: true // Ensures that the authenticator supports storing credentials locally
      }
      // Additional options can be added as needed
    }
  };

  // Create a new credential
  navigator.credentials.create(options)
    .then(credential => {
      // Convert ArrayBuffer (rawId) to base64-encoded string
      const rawIdBase64 = btoa(String.fromCharCode.apply(null, new Uint8Array(credential.rawId)));

      
      const clientDataJSONBase64 = new TextDecoder().decode(credential.response.clientDataJSON);

      
      const attestationObjectBase64 = new TextDecoder().decode(credential.response.attestationObject);
      
      
      // Prepare the extracted data to send to the backend
      const extractedData = {
        id: credential.id,
        rawId: rawIdBase64, // Use the base64-encoded rawId
        response: {
          clientDataJSON: clientDataJSONBase64, // Use the base64-encoded clientDataJSON
          attestationObject: attestationObjectBase64, // Use the base64-encoded attestationObject
        },
        type: credential.type,
      };

      // Display extracted data for debugging
      console.log("Extracted Data:", extractedData);
      
       console.log(credential);

    })
 } catch(err){
    console.log(err)
 }

    },[])

    return (
        <div>
            <h1>
                Set Fingerprint
            </h1>
        </div>
    )
}